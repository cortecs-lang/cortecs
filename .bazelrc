common --enable_platform_specific_config

# ===================
# || C Build Flags ||
# ===================
common --copt="-Wall" --copt="-Wextra" --conlyopt="-std=gnu11" --cxxopt="-std=c++17"

# ===========================
# || Hermetic CC Toolchain ||
# ===========================

build:linux --sandbox_add_mount_pair=/tmp
build:macos --sandbox_add_mount_pair=/var/tmp
build:windows --sandbox_add_mount_pair=C:\Temp

# ====================
# || Remote Caching ||
# ====================

# Use a remote cache to improve local build times and CI efficiency.
# The cache is setup to be publically readable and privatelly writable.
# CI is responsible for uploading artifacts to the cache for use in local builds.

# Debugging hints:
# https://bazel.build/remote/cache-remote#troubleshooting-cache-hits
# 1) clear the cache
# 2) run with `--execution_log_compact_file` on both CI and local build
#   2.1) CI is configured to upload the log as an artifact and can be downloaded from the workflow run
# 3) use `bazel-bin/src/tools/execlog/parser` to generate a sorted, human readable log
# 4) Compare in vscode with right click `selecte for compare` then right click the other `compare with selected`
# 5) Look through the diff to figure out what might be causing cache lookup between the two environments to differ.

# Use a google cloud bucket for remote caching; It's supported out of the box.
common --remote_cache=https://storage.googleapis.com/cortecs-build-cache

# For local builds, only read the cache; Dont attempt to upload artifacts.
# This is overridden in CI: --remote_upload_local_results=true --google_credentials=cache-rw-credentials.json
common --remote_upload_local_results=false

# Bazel remote caching considers the PATH environment variable when determining a remote cache hit.
# If the PATH variable in the CI run is different from your local PATH variable,
# your local run will fail to hit the remote cache artifacts uploaded by CI.
# Set the PATH variable to be consistent across all runs
common --action_env=PATH=/usr/local/bin:/usr/bin:/bin
common --test_env=PATH=/usr/local/bin:/usr/bin:/bin
common --repo_env=PATH=/usr/local/bin:/usr/bin:/bin
common --host_action_env=PATH=/usr/local/bin:/usr/bin:/bin

# Environment variables can degrade remote caching performance.
# This only allows a minimal set of environment variables to be passed into the build
common --incompatible_strict_action_env

# ================
# || Sandboxing ||
# ================

# By default, Cortecs development is already done in a container.
# linux-sandbox doesnt appeart to be an available strategy inside a container.
# Set behavior globally to avoid impacting remote caching performance. 
common --spawn_strategy=processwrapper-sandbox
 