# =============
# || General ||
# =============
# Bazel will stop building after encountering the first error.
# This flag tells Bazel build as much as possible and show as many build errors as possible.
# https://bazel.build/docs/user-manual#keep-going
build --keep_going

# This tells bazel to announce all cli flags used in the build. 
# It's helpful for debugging platform specific build flags.
# https://bazel.build/docs/user-manual#announce-rc
build --announce_rc

# Tells Bazel to use host OS specific configues.
# This is the equivalent to using --config=linux on Linux, --config=windows on Windows, and 
# --config=macos on Apple.
# https://bazel.build/reference/command-line-reference#flag--enable_platform_specific_config
common --enable_platform_specific_config

# ==========
# || Test ||
# ==========
# By default, Bazel hides test output in log files that you have to manually find and open.
# This prints a combined stdout/stderr output from tests immediately after the test is completed, 
# ensuring that test output from simultaneous tests are not interleaved with each other.
# https://bazel.build/docs/user-manual#test-output
test --test_output=all

# Always download coverage files for tests from the remote cache.
# This allows for full coverage reports to be generated on the CI without needing to run all tests.
# https://bazel.build/reference/command-line-reference#flag--experimental_fetch_all_coverage_outputs
test --experimental_fetch_all_coverage_outputs

# ========
# || CC ||
# ========
build --conlyopt="-std=gnu11" --cxxopt="-std=c++17"

# Why are the same flags repeated for each platform?
# good question. When I had just `build --copt="-Werror"...` here, it was being added to the
# cli flags in the wrong order with the platfor specific flags.
# Essentially the command would be: clang <platform flags> <generic flags> ...
# The correct order is: clang <generic flags> <platform flags> ...
# This caused `-Wall` to come after the platform specific `-Wno-...` flags 
# leading to `-Wall` overriding the disabled warnings causing the build to fail.
# This is a workaround to ensure the flags are in the correct order.
build:linux --copt="-Werror" --copt="-Wall" --copt="-Wextra" --copt="-Wpedantic"
build:windows --copt="-Werror" --copt="-Wall" --copt="-Wextra" --copt="-Wpedantic"

# this is required for icu4c. There's a lot of deprecated declarations
build:linux --cxxopt="-Wno-deprecated-declarations"

# Currently required for windows builds
build:windows --linkopt="-lWS2_32"
build:windows --copt="-Wno-deprecated-declarations"
build:windows --copt="-Wno-unused-const-variable"
build:windows --copt="-Wno-language-extension-token"
build:windows --copt="-Wno-unused-variable"

# clang does not seem to respect the -nostdlib flags unless we specify this env var
build:windows --action_env=LIB=some/fake/path

# Bazel will attempt to generate a toolchain configuration if you dont register one
# in the MODULE.bazel. Cortecs uses a hermetic toolchain to avoid system dependencies, 
# and we want to be sure that Bazel isnt silently falling back to the system toolchain.
# this option disables the automatic toolchain configuration and errors out the build
# if for some reason the hermetic toolchain breaks
# https://github.com/bazelbuild/bazel/issues/19714
build --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# ====================
# || Remote Caching ||
# ====================
# Remote caching in Bazel:
# * reduces build times by reusing build artifacts from previous builds, and
# * reduces test times by only running tests that have been impacted by changes.
# Cortecs configures remote the remote cache to be publically readable but only written by the merge queue.
# While much of this is in the spirit of SLSA hardened builds, publishing provenance is TODO.
# This allows local builds to use the cache but not pollute it with local artifacts.
# https://bazel.build/reference/command-line-reference#flag--remote_upload_local_results
# https://bazel.build/reference/command-line-reference#flag--google_credentials
common --noremote_upload_local_results
common:ci --remote_upload_local_results
common:ci --google_credentials=cache-rw-credentials.json

# Google cloud buckets have out of the box support for Bazel remote caching.
# https://bazel.build/reference/command-line-reference#flag--remote_cache
common --remote_cache=https://storage.googleapis.com/cortecs-build-cache

# Bazel includes the value of PATH as part of the key for remote cache lookups.
# Different values of PATH between different systems (ie. CI and local) will cause cache misses.
# This forces Bazel to use a static value for PATH, and it will not inheret LD_LIBRARY_PATH.
# https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
common --incompatible_strict_action_env

# Debugging hints:
# https://bazel.build/remote/cache-remote#troubleshooting-cache-hits
# 1) clear the remote cache
# 2) run with `--execution_log_compact_file` on both CI and local build
#   2.1) CI is configured to upload the log as an artifact and can be downloaded from the workflow run
#   2.2) https://bazel.build/reference/command-line-reference#flag--execution_log_compact_file
# 3) use `bazel-bin/src/tools/execlog/parser` to generate a sorted, human readable log
#   3.1) https://bazel.build/remote/cache-remote#compare-logs
#   3.2) https://github.com/bazelbuild/bazel/tree/master/src/tools/execlog
# 4) Compare in vscode with right click `select for compare` then right click the other `compare with selected`
# 5) Look through the diff to figure out what might be causing cache lookup between the two environments to differ.
