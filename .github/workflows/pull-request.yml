name: Checks run on pull request

# see merge-queue.yml for more information on why we need two separate workflows

on:
  pull_request:

jobs:
  build-linux-gcc:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/devcontainers/base:ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Get the credentials to write the bazel cache from secrets
      - run: 'echo "$GOOGLE_CREDENTIALS" > cache-rw-credentials.json'
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      
      - run: ./bazel build --remote_upload_local_results=true --google_credentials=cache-rw-credentials.json --execution_log_compact_file=ci.log //source/...
      - uses: actions/upload-artifact@v4
        with:
          name: ci-build-log
          path: ci.log

  # build-linux-clang:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - run: CC=clang bazel build //source/...

  # clang-checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Make sure source has been formatted
  #     - run: find source/ -iname '*.h' -o -iname '*.c' -exec clang-format --dry-run --Werror {} \;

  #     # Make sure it builds under both clang and gcc
  #     - run: bazel run @hedron_compile_commands//:refresh_all # generates the compile_commands.json
  #     - run: find source/ -type f -iname '*.c' ! -iname '*.template.c' -exec clang-tidy --config-file ./source/.clang-tidy -p ./ {} \;

  # run-coverage:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - run: sleep 1