name: Checks run in merge queue

# Reference: https://stackoverflow.com/questions/76655935/when-does-a-github-workflow-trigger-for-merge-group-and-is-it-restricted-by-bran
# Particularly the answer by @kojoru

# when adding new checks:
# 1. Add the new job to both merge-queue.yml and pull-request.yml
#   1.1. The job name should be the same in both files
#   1.2. It needs to exist in both files, so even if it's a large test that we dont want to
#        run on every PR event, still add it to pull-request.yml but make it a no-op job.
# 2. Add the new job to required status checks
#   2.1. Go to Settings -> Rules -> Rulesets -> Merge Queue -> Require status checks to pass
#   2.2. + Add checks
#   2.3. add the new job name: the id that comes under jobs
#     2.3.1. it might not show up as a github action. it might just show up as "Any source"
#     2.3.2. adding a name parameter to the job seems to mess this up.
#            too lazy to figure out why, so just leave it out.

on:
  merge_group:

jobs:
  build-linux-gcc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Get the credentials to write the bazel cache from secrets
      - run: 'echo "$GOOGLE_CREDENTIALS" > cache-rw-credentials.json'
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      
      - run: bazel build --config=ci //source/...

  build-linux-clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Get the credentials to write the bazel cache from secrets
      - run: 'echo "$GOOGLE_CREDENTIALS" > cache-rw-credentials.json'
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      
      - run: CC=clang bazel build --config=ci //source/...

  clang-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Make sure source has been formatted
      - run: find source/ -iname '*.h' -o -iname '*.c' -exec clang-format --dry-run --Werror {} \;

      # Make sure it builds under both clang and gcc
      - run: CC=clang bazel run @hedron_compile_commands//:refresh_all # generates the compile_commands.json
      - run: find source/ -type f -iname '*.c' ! -iname '*.template.c' -exec clang-tidy --config-file ./source/.clang-tidy -p ./ {} \;

  run-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Get the credentials to write the bazel cache from secrets
      - run: 'echo "$GOOGLE_CREDENTIALS" > cache-rw-credentials.json'
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # Currently only running coverage for tracking. 
      # May eventually start failing CI if code isnt covered
      - run: bazel coverage --config=ci --instrumentation_filter //source/... --noinstrument_test_targets --combined_report=lcov //source/...
      - run: echo "COVERAGE_DAT=$(bazel info output_path)/_coverage/_coverage_report.dat" >> $GITHUB_ENV
      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ${{ env.COVERAGE_DAT }}
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          # coverage gets uploaded from the github merge queue staging branch
          # override and say coverage is from main
          override_branch: main
          # TODO coverage isnt reported for the right commits
          # it uses the merge commit into the staging branch instead of the code change
