"Contains code related to the Cortecs programming language"
module(name = "cortecs")

bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_cc", version = "0.1.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "googletest", version = "1.15.2")

# git_override dependencies are auto updated by renovate
# due to laziness on the renovate side, bazel_dep must have a version
# it doesn't need to be any particular version,
# so we use "0.0.0" to indicate the version is overridden by git commit
bazel_dep(name = "flecs", version = "0.0.0")
git_override(
    module_name = "flecs",
    remote = "https://github.com/SanderMertens/flecs.git",
    commit = "54bcf3fcc72173265502c051cd2712604a723e30",
)

bazel_dep(name = "icu4c")
git_override(
    module_name = "icu4c",
    remote = "https://github.com/cortecs-lang/icu4c-bazel.git",
    commit = "4166e62e100fb84972352b681b92da3436e2001d",
)

# Usage:
# ./bazelw build //...
# ./bazelw run @hedron_compile_commands//:refresh_all
# Sometimes helpful to clear the bazel cache:
# ./bazelw clean --expunge
# rm -r $(./bazelw info repository_cache)
# To have renovate update this dependency, this must have a version even though
# it's not declared in the hedron_compile_commands MODULE.bazel

# If you get errors with clangd not able to find system headers,
# clangd hardcodes where to search for the headers relative to itself.
# To fix, you need to tell vscode's clangd extension to use the
# clangd from the toolchain and not the system. Should be hereish:
# echo $(pwd)/external/+_repo_rules2+clang-linux-x86_64/bin/clangd
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
)

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
git_repository(
    name = "cJSON",
    remote = "https://github.com/DaveGamble/cJSON.git",
    commit = "12c4bf1986c288950a3d06da757109a6aa1ece38",
    build_file_content = """
cc_library(
    name = "cJSON",
    srcs = ["cJSON.c"],
    hdrs = ["cJSON.h"],
    features = ["treat_warnings_as_errors"],
    includes = ["."],
    visibility = ["//visibility:public"],
)
""",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "clang-linux-x86_64",
    build_file = "//toolchain:clang.BUILD",
    sha256 = "9042f89df9c13a2bf28e16ce34dfe22934b59b5d8390e94b030bb378bdb3c898",
    type = "zip",
    url = "https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/linux-amd64/+/git_revision:0cfd03ac0d3f9713090a581bda07584754c73a49",
)

http_archive(
    name = "clang-linux-aarch64",
    build_file = "//toolchain:clang.BUILD",
    sha256 = "61abb915821190baddafa973c69a9db9acda5a16ed3a89489ea2b3b030a2330b",
    type = "zip",
    url = "https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/linux-arm64/+/git_revision:0cfd03ac0d3f9713090a581bda07584754c73a49",
)

http_archive(
    name = "linux_sysroot",
    build_file = "//toolchain:linux_sysroot.BUILD",
    sha256 = "f45ca0d8b46810b94d2a7dbc65f9092337d6a9568b260b51173a5ab9314da25e",
    type = "zip",
    url = "https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/sysroot/bionic/+/git_revision:702eb9654703a7cec1cadf93a7e3aa269d053943",
)

register_toolchains(
    "//toolchain:host_cc_toolchain",
    dev_dependency = True,
)
