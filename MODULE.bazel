"Contains code related to the Cortecs programming language"
module(name = "cortecs", version = "2024.12.25")

bazel_dep(name = "rules_cc", version = "0.0.13")

bazel_dep(name = "toolchains_llvm", version = "1.2.0")
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "19.1.0",
)
use_repo(llvm, "llvm_toolchain")
register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "flecs", version = "0.0.0")
git_override(
    module_name = "flecs",
    remote = "https://github.com/SanderMertens/flecs.git",
    commit = "243616bf5ebabccf1982545ebbd72d5603b6eaa4",
)

bazel_dep(name = "icu4c", version = "0.0.0")
git_override(
    module_name = "icu4c",
    remote = "https://github.com/cortecs-lang/icu4c-bazel.git",
    commit = "4166e62e100fb84972352b681b92da3436e2001d",
)

# Usage:
# bazel build //...
# bazel run @hedron_compile_commands//:refresh_all
# Sometimes helpful to clear the bazel cache:
# bazel clean
# rm -r $(./bazel info repository_cache)
# To have renovate update this dependency, this must have a version even though
# it's not declared in the hedron_compile_commands MODULE.bazel
bazel_dep(name = "hedron_compile_commands", version = "0.0.0", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
)

# git_repository dependencies are auto updated by a github action that
# * scans for lines that start with git_repository(
# * inside it looks for:
#   * name
#   * remote
#   * branch
#     * this conflicts with commit in git_repository
#     * this line should be commented out
#   * commit
#     * due to a bit of laziness this must come last
# * checks the remote for the commit at the tip of the branch
# * if they're different, it submits a new PR for each individual dependency that needs updating

# Make sure the 4 attributes are at the top of the declaration/ahead of build_file_content.
# due to a bit of laziness in the script, the error checking only looks for build_file_content or )
# to determine end of declaration.

# git_override dependencies are auto updated by renovate
# due to laziness on the renovate side, bazel_dep must have a version
# it doesn't need to be any particular version,
# so we use "0.0.0" to indicate the version is overridden by git commit
git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

git_repository(
    name = "unity",
    remote = "https://github.com/ThrowTheSwitch/Unity.git",
    # branch = "master",
    commit = "73237c5d224169c7b4d2ec8321f9ac92e8071708",
    build_file_content = """
cc_library(
    name = "unity",
    srcs = glob(["src/*.c"]),
    hdrs = glob(["src/*.h"]),
    features = ["treat_warnings_as_errors"],
    includes = ["src/"],
    visibility = ["//visibility:public"],
)
""",
)

git_repository(
    name = "cJSON",
    remote = "https://github.com/DaveGamble/cJSON.git",
    # branch = "master",
    commit = "12c4bf1986c288950a3d06da757109a6aa1ece38",
    build_file_content = """
cc_library(
    name = "cJSON",
    srcs = ["cJSON.c"],
    hdrs = ["cJSON.h"],
    features = ["treat_warnings_as_errors"],
    includes = ["."],
    visibility = ["//visibility:public"],
)
""",
)
